# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conint

from typing import Optional

from pyevr.openapi_client.models.add_measurement_act_request import (
    AddMeasurementActRequest,
)
from pyevr.openapi_client.models.paged_result_of_measurement_act import (
    PagedResultOfMeasurementAct,
)

from pyevr.openapi_client.api_client import ApiClient
from pyevr.openapi_client.api_response import ApiResponse
from pyevr.openapi_client.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class MeasurementsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def measurements_get(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        page: Annotated[
            Optional[conint(strict=True, le=2147483647, ge=1)],
            Field(description="Tagastatav lehekülg"),
        ] = None,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> PagedResultOfMeasurementAct:  # noqa: E501
        """Veoselehe mõõtmisandmete pärimine  # noqa: E501

        Tagastab veoselehega seotud mõõtmisandmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.measurements_get(number, page, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param page: Tagastatav lehekülg
        :type page: int
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PagedResultOfMeasurementAct
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the measurements_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.measurements_get_with_http_info(
            number, page, evr_language, **kwargs
        )  # noqa: E501

    @validate_arguments
    def measurements_get_with_http_info(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        page: Annotated[
            Optional[conint(strict=True, le=2147483647, ge=1)],
            Field(description="Tagastatav lehekülg"),
        ] = None,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehe mõõtmisandmete pärimine  # noqa: E501

        Tagastab veoselehega seotud mõõtmisandmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.measurements_get_with_http_info(number, page, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param page: Tagastatav lehekülg
        :type page: int
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PagedResultOfMeasurementAct, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["number", "page", "evr_language"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method measurements_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number"]:
            _path_params["number"] = _params["number"]

        # process the query parameters
        _query_params = []
        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {
            "404": "ProblemDetails",
            "403": "ProblemDetails",
            "401": "ProblemDetails",
            "200": "PagedResultOfMeasurementAct",
            "400": "ValidationResult",
        }

        return self.api_client.call_api(
            "/api/waybills/{number}/measurements",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def measurements_post(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        add_measurement_act_request: Annotated[
            AddMeasurementActRequest, Field(..., description="Mõõtmisandmed")
        ],
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> None:  # noqa: E501
        """Veoselehele mõõtmisandmete lisamine  # noqa: E501

        Lisab veoselehele mõõtmisandmed. Mõõtmisandmeid saab lisada \"koorem maas\" staatuses veoselehele sellele märgitud veose saaja või tema volitatud mõõtja. Mõõtmistulemusi on võimalik lisada koormapakkidena või lihtsalt sortimentide kogustena.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.measurements_post(number, add_measurement_act_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param add_measurement_act_request: Mõõtmisandmed (required)
        :type add_measurement_act_request: AddMeasurementActRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the measurements_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.measurements_post_with_http_info(
            number, add_measurement_act_request, evr_language, **kwargs
        )  # noqa: E501

    @validate_arguments
    def measurements_post_with_http_info(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        add_measurement_act_request: Annotated[
            AddMeasurementActRequest, Field(..., description="Mõõtmisandmed")
        ],
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehele mõõtmisandmete lisamine  # noqa: E501

        Lisab veoselehele mõõtmisandmed. Mõõtmisandmeid saab lisada \"koorem maas\" staatuses veoselehele sellele märgitud veose saaja või tema volitatud mõõtja. Mõõtmistulemusi on võimalik lisada koormapakkidena või lihtsalt sortimentide kogustena.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.measurements_post_with_http_info(number, add_measurement_act_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param add_measurement_act_request: Mõõtmisandmed (required)
        :type add_measurement_act_request: AddMeasurementActRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["number", "add_measurement_act_request", "evr_language"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method measurements_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number"]:
            _path_params["number"] = _params["number"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["add_measurement_act_request"] is not None:
            _body_params = _params["add_measurement_act_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/api/waybills/{number}/measurements",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
