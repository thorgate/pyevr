# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr, conint

from typing import Optional

from pyevr.openapi_client.models.add_shipments_to_waybill_request import (
    AddShipmentsToWaybillRequest,
)
from pyevr.openapi_client.models.add_waybill_note_request import AddWaybillNoteRequest
from pyevr.openapi_client.models.cancel_waybill_request import CancelWaybillRequest
from pyevr.openapi_client.models.paged_result_of_waybill import PagedResultOfWaybill
from pyevr.openapi_client.models.start_waybill_request import StartWaybillRequest
from pyevr.openapi_client.models.unload_waybill_request import UnloadWaybillRequest
from pyevr.openapi_client.models.waybill import Waybill
from pyevr.openapi_client.models.waybill_sort_field import WaybillSortField
from pyevr.openapi_client.models.waybill_status import WaybillStatus

from pyevr.openapi_client.api_client import ApiClient
from pyevr.openapi_client.api_response import ApiResponse
from pyevr.openapi_client.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class WaybillsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def waybills_add_note(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        add_waybill_note_request: AddWaybillNoteRequest,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> None:  # noqa: E501
        """Veoselehe märkuse lisamine  # noqa: E501

        Lisab veoselehele uue märkuse. Olemasolevaid märkuseid ei muudeta. Märkust saavad lisada kõik veoselehega seotud osapooled (v.a volitatud vaatleja).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_add_note(number, add_waybill_note_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param add_waybill_note_request: (required)
        :type add_waybill_note_request: AddWaybillNoteRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_add_note_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_add_note_with_http_info(
            number, add_waybill_note_request, evr_language, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_add_note_with_http_info(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        add_waybill_note_request: AddWaybillNoteRequest,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehe märkuse lisamine  # noqa: E501

        Lisab veoselehele uue märkuse. Olemasolevaid märkuseid ei muudeta. Märkust saavad lisada kõik veoselehega seotud osapooled (v.a volitatud vaatleja).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_add_note_with_http_info(number, add_waybill_note_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param add_waybill_note_request: (required)
        :type add_waybill_note_request: AddWaybillNoteRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["number", "add_waybill_note_request", "evr_language"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_add_note" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number"]:
            _path_params["number"] = _params["number"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["add_waybill_note_request"] is not None:
            _body_params = _params["add_waybill_note_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/api/waybills/{number}/note",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_add_shipments(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        add_shipments_to_waybill_request: AddShipmentsToWaybillRequest,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> None:  # noqa: E501
        """Veoselehele veose lisamine  # noqa: E501

        Lisab veoselehele uue veose. Veoseid saab lisada veoselehele vedaja ja veoselehe looja. Veoseid saab lisada ainult veos olevatele veoselehtedele.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_add_shipments(number, add_shipments_to_waybill_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param add_shipments_to_waybill_request: (required)
        :type add_shipments_to_waybill_request: AddShipmentsToWaybillRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_add_shipments_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_add_shipments_with_http_info(
            number, add_shipments_to_waybill_request, evr_language, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_add_shipments_with_http_info(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        add_shipments_to_waybill_request: AddShipmentsToWaybillRequest,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehele veose lisamine  # noqa: E501

        Lisab veoselehele uue veose. Veoseid saab lisada veoselehele vedaja ja veoselehe looja. Veoseid saab lisada ainult veos olevatele veoselehtedele.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_add_shipments_with_http_info(number, add_shipments_to_waybill_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param add_shipments_to_waybill_request: (required)
        :type add_shipments_to_waybill_request: AddShipmentsToWaybillRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["number", "add_shipments_to_waybill_request", "evr_language"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_add_shipments" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number"]:
            _path_params["number"] = _params["number"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["add_shipments_to_waybill_request"] is not None:
            _body_params = _params["add_shipments_to_waybill_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/api/waybills/{number}/shipments",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_cancel(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        cancel_waybill_request: CancelWaybillRequest,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> None:  # noqa: E501
        """Veoselehe tühistamine  # noqa: E501

        Tühistab veoselehe. Veoselehe staatuseks märgitakse tühistatud (status: \"cancelled\"). Veoselehe saab tühistada veoselehe looja, kuni veoseleht pole veel vastu võetud.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_cancel(number, cancel_waybill_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param cancel_waybill_request: (required)
        :type cancel_waybill_request: CancelWaybillRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_cancel_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_cancel_with_http_info(
            number, cancel_waybill_request, evr_language, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_cancel_with_http_info(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        cancel_waybill_request: CancelWaybillRequest,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehe tühistamine  # noqa: E501

        Tühistab veoselehe. Veoselehe staatuseks märgitakse tühistatud (status: \"cancelled\"). Veoselehe saab tühistada veoselehe looja, kuni veoseleht pole veel vastu võetud.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_cancel_with_http_info(number, cancel_waybill_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param cancel_waybill_request: (required)
        :type cancel_waybill_request: CancelWaybillRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["number", "cancel_waybill_request", "evr_language"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_cancel" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number"]:
            _path_params["number"] = _params["number"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["cancel_waybill_request"] is not None:
            _body_params = _params["cancel_waybill_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/api/waybills/{number}/cancel",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_finish(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> None:  # noqa: E501
        """Veoselehe lõpetamine  # noqa: E501

        Lõpetab veoselehe ja veoselehe staatuseks märgitakse \"veoseleht lõpetatud\" (status: \"finished\"). Veoselehte saavad lõpetada veoselehele märgitud saaja ning volitatud mõõtja ja seda ainult \"koorem maas\" staatuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_finish(number, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_finish_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_finish_with_http_info(
            number, evr_language, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_finish_with_http_info(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehe lõpetamine  # noqa: E501

        Lõpetab veoselehe ja veoselehe staatuseks märgitakse \"veoseleht lõpetatud\" (status: \"finished\"). Veoselehte saavad lõpetada veoselehele märgitud saaja ning volitatud mõõtja ja seda ainult \"koorem maas\" staatuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_finish_with_http_info(number, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["number", "evr_language"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_finish" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number"]:
            _path_params["number"] = _params["number"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/api/waybills/{number}/finish",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_list(
        self,
        created_after: Annotated[
            Optional[datetime],
            Field(
                description="Filtreerib veoselehed, mis on loodud hiljem või samal ajal. Kui 'created_after' ja 'created_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse."
            ),
        ] = None,
        created_before: Annotated[
            Optional[datetime],
            Field(
                description="Filtreerib veoselehed, mis on loodud varem või samal ajal. Kui 'created_after' ja 'created_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse."
            ),
        ] = None,
        last_modified_after: Annotated[
            Optional[datetime],
            Field(
                description="Filtreerib veoselehed, mis on muutunud pärast määratud aega. Kui 'last_modified_after' ja 'last_modified_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse."
            ),
        ] = None,
        last_modified_before: Annotated[
            Optional[datetime],
            Field(
                description="Filtreerib veoselehed, mis on muutunud enne määratud aega. Kui 'last_modified_after' ja 'last_modified_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse."
            ),
        ] = None,
        status: Annotated[
            Optional[WaybillStatus],
            Field(
                description="Filtreerib veoselehed, mis vastavad määratud staatusele"
            ),
        ] = None,
        owner_code: Annotated[
            Optional[StrictStr],
            Field(description="Filtreerib veoselehed, millel on sama omaniku kood"),
        ] = None,
        transporter_code: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed, millel on sama transportija kood"
            ),
        ] = None,
        receiver_code: Annotated[
            Optional[StrictStr],
            Field(description="Filtreerib veoselehed, millel on sama saaja kood"),
        ] = None,
        van_registration_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed, millel on sama veoki registreerimisnumber (tõstutundlik)"
            ),
        ] = None,
        trailer_registration_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed, millel on sama haagise registreerimisnumber (tõstutundlik)"
            ),
        ] = None,
        driver_id_code: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed, millel on sama transportija autojuhi isikukood (tõstutundlik)"
            ),
        ] = None,
        place_of_delivery_code: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed millel on sama tarnekoha kood (tõstutundlik)"
            ),
        ] = None,
        text: Annotated[
            Optional[StrictStr],
            Field(
                description="Vabateksti otsing. Toetatud on järgmine süntaks: * ilma jutumärkideta tekst: sõnade vahel rakendatakse loogiline JA. * jutumärkides tekst: otsitakse jutumärkides olevat lauset. * OR: loogiline VÕI operaator sõnade vahel. * -: loogiline EITUS."
            ),
        ] = None,
        sort: Annotated[
            Optional[WaybillSortField],
            Field(description="Sorteerib tulemused valitud välja järgi"),
        ] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="Määrab tagastatava lehekülje")
        ] = None,
        page_size: Annotated[
            Optional[conint(strict=True, le=500, ge=1)],
            Field(description="Määrab lehekülje suuruse"),
        ] = None,
        include_latest_measurements: Annotated[
            Optional[StrictBool],
            Field(
                description="Kas lisada veoselehele viimase mõõtmise andmed (vaikimisi ei lisata)"
            ),
        ] = None,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> PagedResultOfWaybill:  # noqa: E501
        """Veoselehtede pärimine  # noqa: E501

        Tagastab filtritele vastavad veoselehed. Veoselehti saavad pärida ainult nendega seotud asutused.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_list(created_after, created_before, last_modified_after, last_modified_before, status, owner_code, transporter_code, receiver_code, van_registration_number, trailer_registration_number, driver_id_code, place_of_delivery_code, text, sort, page, page_size, include_latest_measurements, evr_language, async_req=True)
        >>> result = thread.get()

        :param created_after: Filtreerib veoselehed, mis on loodud hiljem või samal ajal. Kui 'created_after' ja 'created_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse.
        :type created_after: datetime
        :param created_before: Filtreerib veoselehed, mis on loodud varem või samal ajal. Kui 'created_after' ja 'created_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse.
        :type created_before: datetime
        :param last_modified_after: Filtreerib veoselehed, mis on muutunud pärast määratud aega. Kui 'last_modified_after' ja 'last_modified_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse.
        :type last_modified_after: datetime
        :param last_modified_before: Filtreerib veoselehed, mis on muutunud enne määratud aega. Kui 'last_modified_after' ja 'last_modified_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse.
        :type last_modified_before: datetime
        :param status: Filtreerib veoselehed, mis vastavad määratud staatusele
        :type status: WaybillStatus
        :param owner_code: Filtreerib veoselehed, millel on sama omaniku kood
        :type owner_code: str
        :param transporter_code: Filtreerib veoselehed, millel on sama transportija kood
        :type transporter_code: str
        :param receiver_code: Filtreerib veoselehed, millel on sama saaja kood
        :type receiver_code: str
        :param van_registration_number: Filtreerib veoselehed, millel on sama veoki registreerimisnumber (tõstutundlik)
        :type van_registration_number: str
        :param trailer_registration_number: Filtreerib veoselehed, millel on sama haagise registreerimisnumber (tõstutundlik)
        :type trailer_registration_number: str
        :param driver_id_code: Filtreerib veoselehed, millel on sama transportija autojuhi isikukood (tõstutundlik)
        :type driver_id_code: str
        :param place_of_delivery_code: Filtreerib veoselehed millel on sama tarnekoha kood (tõstutundlik)
        :type place_of_delivery_code: str
        :param text: Vabateksti otsing. Toetatud on järgmine süntaks: * ilma jutumärkideta tekst: sõnade vahel rakendatakse loogiline JA. * jutumärkides tekst: otsitakse jutumärkides olevat lauset. * OR: loogiline VÕI operaator sõnade vahel. * -: loogiline EITUS.
        :type text: str
        :param sort: Sorteerib tulemused valitud välja järgi
        :type sort: WaybillSortField
        :param page: Määrab tagastatava lehekülje
        :type page: int
        :param page_size: Määrab lehekülje suuruse
        :type page_size: int
        :param include_latest_measurements: Kas lisada veoselehele viimase mõõtmise andmed (vaikimisi ei lisata)
        :type include_latest_measurements: bool
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PagedResultOfWaybill
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_list_with_http_info(
            created_after,
            created_before,
            last_modified_after,
            last_modified_before,
            status,
            owner_code,
            transporter_code,
            receiver_code,
            van_registration_number,
            trailer_registration_number,
            driver_id_code,
            place_of_delivery_code,
            text,
            sort,
            page,
            page_size,
            include_latest_measurements,
            evr_language,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_list_with_http_info(
        self,
        created_after: Annotated[
            Optional[datetime],
            Field(
                description="Filtreerib veoselehed, mis on loodud hiljem või samal ajal. Kui 'created_after' ja 'created_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse."
            ),
        ] = None,
        created_before: Annotated[
            Optional[datetime],
            Field(
                description="Filtreerib veoselehed, mis on loodud varem või samal ajal. Kui 'created_after' ja 'created_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse."
            ),
        ] = None,
        last_modified_after: Annotated[
            Optional[datetime],
            Field(
                description="Filtreerib veoselehed, mis on muutunud pärast määratud aega. Kui 'last_modified_after' ja 'last_modified_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse."
            ),
        ] = None,
        last_modified_before: Annotated[
            Optional[datetime],
            Field(
                description="Filtreerib veoselehed, mis on muutunud enne määratud aega. Kui 'last_modified_after' ja 'last_modified_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse."
            ),
        ] = None,
        status: Annotated[
            Optional[WaybillStatus],
            Field(
                description="Filtreerib veoselehed, mis vastavad määratud staatusele"
            ),
        ] = None,
        owner_code: Annotated[
            Optional[StrictStr],
            Field(description="Filtreerib veoselehed, millel on sama omaniku kood"),
        ] = None,
        transporter_code: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed, millel on sama transportija kood"
            ),
        ] = None,
        receiver_code: Annotated[
            Optional[StrictStr],
            Field(description="Filtreerib veoselehed, millel on sama saaja kood"),
        ] = None,
        van_registration_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed, millel on sama veoki registreerimisnumber (tõstutundlik)"
            ),
        ] = None,
        trailer_registration_number: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed, millel on sama haagise registreerimisnumber (tõstutundlik)"
            ),
        ] = None,
        driver_id_code: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed, millel on sama transportija autojuhi isikukood (tõstutundlik)"
            ),
        ] = None,
        place_of_delivery_code: Annotated[
            Optional[StrictStr],
            Field(
                description="Filtreerib veoselehed millel on sama tarnekoha kood (tõstutundlik)"
            ),
        ] = None,
        text: Annotated[
            Optional[StrictStr],
            Field(
                description="Vabateksti otsing. Toetatud on järgmine süntaks: * ilma jutumärkideta tekst: sõnade vahel rakendatakse loogiline JA. * jutumärkides tekst: otsitakse jutumärkides olevat lauset. * OR: loogiline VÕI operaator sõnade vahel. * -: loogiline EITUS."
            ),
        ] = None,
        sort: Annotated[
            Optional[WaybillSortField],
            Field(description="Sorteerib tulemused valitud välja järgi"),
        ] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="Määrab tagastatava lehekülje")
        ] = None,
        page_size: Annotated[
            Optional[conint(strict=True, le=500, ge=1)],
            Field(description="Määrab lehekülje suuruse"),
        ] = None,
        include_latest_measurements: Annotated[
            Optional[StrictBool],
            Field(
                description="Kas lisada veoselehele viimase mõõtmise andmed (vaikimisi ei lisata)"
            ),
        ] = None,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehtede pärimine  # noqa: E501

        Tagastab filtritele vastavad veoselehed. Veoselehti saavad pärida ainult nendega seotud asutused.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_list_with_http_info(created_after, created_before, last_modified_after, last_modified_before, status, owner_code, transporter_code, receiver_code, van_registration_number, trailer_registration_number, driver_id_code, place_of_delivery_code, text, sort, page, page_size, include_latest_measurements, evr_language, async_req=True)
        >>> result = thread.get()

        :param created_after: Filtreerib veoselehed, mis on loodud hiljem või samal ajal. Kui 'created_after' ja 'created_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse.
        :type created_after: datetime
        :param created_before: Filtreerib veoselehed, mis on loodud varem või samal ajal. Kui 'created_after' ja 'created_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse.
        :type created_before: datetime
        :param last_modified_after: Filtreerib veoselehed, mis on muutunud pärast määratud aega. Kui 'last_modified_after' ja 'last_modified_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse.
        :type last_modified_after: datetime
        :param last_modified_before: Filtreerib veoselehed, mis on muutunud enne määratud aega. Kui 'last_modified_after' ja 'last_modified_before' on mõlemad määratud, peab nende vahe jääma 1 kuu piiresse.
        :type last_modified_before: datetime
        :param status: Filtreerib veoselehed, mis vastavad määratud staatusele
        :type status: WaybillStatus
        :param owner_code: Filtreerib veoselehed, millel on sama omaniku kood
        :type owner_code: str
        :param transporter_code: Filtreerib veoselehed, millel on sama transportija kood
        :type transporter_code: str
        :param receiver_code: Filtreerib veoselehed, millel on sama saaja kood
        :type receiver_code: str
        :param van_registration_number: Filtreerib veoselehed, millel on sama veoki registreerimisnumber (tõstutundlik)
        :type van_registration_number: str
        :param trailer_registration_number: Filtreerib veoselehed, millel on sama haagise registreerimisnumber (tõstutundlik)
        :type trailer_registration_number: str
        :param driver_id_code: Filtreerib veoselehed, millel on sama transportija autojuhi isikukood (tõstutundlik)
        :type driver_id_code: str
        :param place_of_delivery_code: Filtreerib veoselehed millel on sama tarnekoha kood (tõstutundlik)
        :type place_of_delivery_code: str
        :param text: Vabateksti otsing. Toetatud on järgmine süntaks: * ilma jutumärkideta tekst: sõnade vahel rakendatakse loogiline JA. * jutumärkides tekst: otsitakse jutumärkides olevat lauset. * OR: loogiline VÕI operaator sõnade vahel. * -: loogiline EITUS.
        :type text: str
        :param sort: Sorteerib tulemused valitud välja järgi
        :type sort: WaybillSortField
        :param page: Määrab tagastatava lehekülje
        :type page: int
        :param page_size: Määrab lehekülje suuruse
        :type page_size: int
        :param include_latest_measurements: Kas lisada veoselehele viimase mõõtmise andmed (vaikimisi ei lisata)
        :type include_latest_measurements: bool
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PagedResultOfWaybill, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "created_after",
            "created_before",
            "last_modified_after",
            "last_modified_before",
            "status",
            "owner_code",
            "transporter_code",
            "receiver_code",
            "van_registration_number",
            "trailer_registration_number",
            "driver_id_code",
            "place_of_delivery_code",
            "text",
            "sort",
            "page",
            "page_size",
            "include_latest_measurements",
            "evr_language",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_list" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("created_after") is not None:  # noqa: E501
            if isinstance(_params["created_after"], datetime):
                _query_params.append(
                    (
                        "created_after",
                        _params["created_after"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("created_after", _params["created_after"]))

        if _params.get("created_before") is not None:  # noqa: E501
            if isinstance(_params["created_before"], datetime):
                _query_params.append(
                    (
                        "created_before",
                        _params["created_before"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("created_before", _params["created_before"]))

        if _params.get("last_modified_after") is not None:  # noqa: E501
            if isinstance(_params["last_modified_after"], datetime):
                _query_params.append(
                    (
                        "last_modified_after",
                        _params["last_modified_after"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("last_modified_after", _params["last_modified_after"])
                )

        if _params.get("last_modified_before") is not None:  # noqa: E501
            if isinstance(_params["last_modified_before"], datetime):
                _query_params.append(
                    (
                        "last_modified_before",
                        _params["last_modified_before"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("last_modified_before", _params["last_modified_before"])
                )

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"].value))

        if _params.get("owner_code") is not None:  # noqa: E501
            _query_params.append(("owner_code", _params["owner_code"]))

        if _params.get("transporter_code") is not None:  # noqa: E501
            _query_params.append(("transporter_code", _params["transporter_code"]))

        if _params.get("receiver_code") is not None:  # noqa: E501
            _query_params.append(("receiver_code", _params["receiver_code"]))

        if _params.get("van_registration_number") is not None:  # noqa: E501
            _query_params.append(
                ("van_registration_number", _params["van_registration_number"])
            )

        if _params.get("trailer_registration_number") is not None:  # noqa: E501
            _query_params.append(
                ("trailer_registration_number", _params["trailer_registration_number"])
            )

        if _params.get("driver_id_code") is not None:  # noqa: E501
            _query_params.append(("driver_id_code", _params["driver_id_code"]))

        if _params.get("place_of_delivery_code") is not None:  # noqa: E501
            _query_params.append(
                ("place_of_delivery_code", _params["place_of_delivery_code"])
            )

        if _params.get("text") is not None:  # noqa: E501
            _query_params.append(("text", _params["text"]))

        if _params.get("sort") is not None:  # noqa: E501
            _query_params.append(("sort", _params["sort"].value))

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        if _params.get("page_size") is not None:  # noqa: E501
            _query_params.append(("page_size", _params["page_size"]))

        if _params.get("include_latest_measurements") is not None:  # noqa: E501
            _query_params.append(
                ("includeLatestMeasurements", _params["include_latest_measurements"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {
            "401": "ProblemDetails",
            "403": "ProblemDetails",
            "200": "PagedResultOfWaybill",
            "400": "ValidationResult",
        }

        return self.api_client.call_api(
            "/api/waybills",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_get(
        self,
        number: Annotated[
            StrictStr,
            Field(..., description="Päritava veoselehe number (tõstutundetu)"),
        ],
        include_latest_measurements: Optional[StrictBool] = None,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> Waybill:  # noqa: E501
        """Veoselehe pärimine  # noqa: E501

        Tagastab numbrile vastava veoselehe. Veoselehte saavad pärida ainult sellega seotud asutused.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_get(number, include_latest_measurements, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Päritava veoselehe number (tõstutundetu) (required)
        :type number: str
        :param include_latest_measurements:
        :type include_latest_measurements: bool
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Waybill
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_get_with_http_info(
            number, include_latest_measurements, evr_language, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_get_with_http_info(
        self,
        number: Annotated[
            StrictStr,
            Field(..., description="Päritava veoselehe number (tõstutundetu)"),
        ],
        include_latest_measurements: Optional[StrictBool] = None,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehe pärimine  # noqa: E501

        Tagastab numbrile vastava veoselehe. Veoselehte saavad pärida ainult sellega seotud asutused.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_get_with_http_info(number, include_latest_measurements, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Päritava veoselehe number (tõstutundetu) (required)
        :type number: str
        :param include_latest_measurements:
        :type include_latest_measurements: bool
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Waybill, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["number", "include_latest_measurements", "evr_language"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number"]:
            _path_params["number"] = _params["number"]

        # process the query parameters
        _query_params = []
        if _params.get("include_latest_measurements") is not None:  # noqa: E501
            _query_params.append(
                ("includeLatestMeasurements", _params["include_latest_measurements"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {
            "401": "ProblemDetails",
            "403": "ProblemDetails",
            "404": "ProblemDetails",
            "200": "Waybill",
        }

        return self.api_client.call_api(
            "/api/waybills/{number}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_post(
        self,
        start_waybill_request: Annotated[
            StartWaybillRequest, Field(..., description="Veoselehe andmed")
        ],
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> str:  # noqa: E501
        """Veoselehe loomine  # noqa: E501

        Loob veoselehe staatusega \"vedu alustatud\" (status: \"shipping\"). Veo alustaja peab olema ise märgitud veoselehele kas omanikuks või vedajaks. Kui metsamaterjali saaja on EVR'iga liitunud asutus, peab veoselehel märgitud tarnekoht kuuluma ka saaja asutusele. Toimingu õnnestumisel tagastatakse loodud veoselehe number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_post(start_waybill_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param start_waybill_request: Veoselehe andmed (required)
        :type start_waybill_request: StartWaybillRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_post_with_http_info(
            start_waybill_request, evr_language, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_post_with_http_info(
        self,
        start_waybill_request: Annotated[
            StartWaybillRequest, Field(..., description="Veoselehe andmed")
        ],
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehe loomine  # noqa: E501

        Loob veoselehe staatusega \"vedu alustatud\" (status: \"shipping\"). Veo alustaja peab olema ise märgitud veoselehele kas omanikuks või vedajaks. Kui metsamaterjali saaja on EVR'iga liitunud asutus, peab veoselehel märgitud tarnekoht kuuluma ka saaja asutusele. Toimingu õnnestumisel tagastatakse loodud veoselehe number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_post_with_http_info(start_waybill_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param start_waybill_request: Veoselehe andmed (required)
        :type start_waybill_request: StartWaybillRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["start_waybill_request", "evr_language"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["start_waybill_request"] is not None:
            _body_params = _params["start_waybill_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {
            "401": "ProblemDetails",
            "403": "ProblemDetails",
            "200": "str",
            "400": "ValidationResult",
        }

        return self.api_client.call_api(
            "/api/waybills",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def waybills_unload(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        unload_waybill_request: UnloadWaybillRequest,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> None:  # noqa: E501
        """Veoselehel veo lõpetamine  # noqa: E501

        Lõpetab veo veoselehel ja veoselehe staatuseks märgitakse \"koorem maas\" (status: \"unloaded\"). Vedu saab lõpetada veoselehe looja või vedaja ja seda ainult \"vedu alustatud\" (status: shipping) staatuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_unload(number, unload_waybill_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param unload_waybill_request: (required)
        :type unload_waybill_request: UnloadWaybillRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the waybills_unload_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.waybills_unload_with_http_info(
            number, unload_waybill_request, evr_language, **kwargs
        )  # noqa: E501

    @validate_arguments
    def waybills_unload_with_http_info(
        self,
        number: Annotated[
            StrictStr, Field(..., description="Veoselehe number (tõstutundetu)")
        ],
        unload_waybill_request: UnloadWaybillRequest,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Veoselehel veo lõpetamine  # noqa: E501

        Lõpetab veo veoselehel ja veoselehe staatuseks märgitakse \"koorem maas\" (status: \"unloaded\"). Vedu saab lõpetada veoselehe looja või vedaja ja seda ainult \"vedu alustatud\" (status: shipping) staatuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.waybills_unload_with_http_info(number, unload_waybill_request, evr_language, async_req=True)
        >>> result = thread.get()

        :param number: Veoselehe number (tõstutundetu) (required)
        :type number: str
        :param unload_waybill_request: (required)
        :type unload_waybill_request: UnloadWaybillRequest
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["number", "unload_waybill_request", "evr_language"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method waybills_unload" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["number"]:
            _path_params["number"] = _params["number"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["evr_language"]:
            _header_params["EVR-LANGUAGE"] = _params["evr_language"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["unload_waybill_request"] is not None:
            _body_params = _params["unload_waybill_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["SecretApiKey"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/api/waybills/{number}/unload",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
