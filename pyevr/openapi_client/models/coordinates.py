# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conint


class Coordinates(BaseModel):
    """
    Coordinates
    """

    x: Union[StrictFloat, StrictInt] = Field(..., description="X koordinaat")
    y: Union[StrictFloat, StrictInt] = Field(..., description="Y koordinaat")
    epsg: Optional[conint(strict=True, le=99999, ge=1000)] = Field(
        None, description="EPSG formaadis koordinaatsüsteemiväärtus (näide: 3301)"
    )
    __properties = ["x", "y", "epsg"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Coordinates:
        """Create an instance of Coordinates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if epsg (nullable) is None
        # and __fields_set__ contains the field
        if self.epsg is None and "epsg" in self.__fields_set__:
            _dict["epsg"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Coordinates:
        """Create an instance of Coordinates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Coordinates.parse_obj(obj)

        _obj = Coordinates.parse_obj(
            {"x": obj.get("x"), "y": obj.get("y"), "epsg": obj.get("epsg")}
        )
        return _obj
