# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei Ãµnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictStr


class HoldingBase(BaseModel):
    """
    HoldingBase
    """

    type: StrictStr = Field(...)
    __properties = ["type"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = "type"

    # discriminator mappings
    __discriminator_value_class_map = {
        "ConsolidatedAct": "ConsolidatedAct",
        "ContractForTransferOfCuttingRights": "ContractForTransferOfCuttingRights",
        "ForestAct": "ForestAct",
        "ForestNotice": "ForestNotice",
        "InventoryAct": "InventoryAct",
        "SalesContract": "SalesContract",
        "WithoutForestNotice": "WithoutForestNotice",
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> Union(
        ConsolidatedAct,
        ContractForTransferOfCuttingRights,
        ForestAct,
        ForestNotice,
        InventoryAct,
        SalesContract,
        WithoutForestNotice,
    ):
        """Create an instance of HoldingBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> Union(
        ConsolidatedAct,
        ContractForTransferOfCuttingRights,
        ForestAct,
        ForestNotice,
        InventoryAct,
        SalesContract,
        WithoutForestNotice,
    ):
        """Create an instance of HoldingBase from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError(
                "HoldingBase failed to lookup discriminator value from "
                + json.dumps(obj)
                + ". Discriminator property name: "
                + cls.__discriminator_property_name
                + ", mapping: "
                + json.dumps(cls.__discriminator_value_class_map)
            )


from pyevr.openapi_client.models.consolidated_act import ConsolidatedAct
from pyevr.openapi_client.models.contract_for_transfer_of_cutting_rights import (
    ContractForTransferOfCuttingRights,
)
from pyevr.openapi_client.models.forest_act import ForestAct
from pyevr.openapi_client.models.forest_notice import ForestNotice
from pyevr.openapi_client.models.inventory_act import InventoryAct
from pyevr.openapi_client.models.sales_contract import SalesContract
from pyevr.openapi_client.models.without_forest_notice import WithoutForestNotice

HoldingBase.update_forward_refs()
