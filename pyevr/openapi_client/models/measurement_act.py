# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from pyevr.openapi_client.models.shipment_item import ShipmentItem
from pyevr.openapi_client.models.total import Total


class MeasurementAct(BaseModel):
    """
    MeasurementAct
    """

    act_number: Optional[constr(strict=True, max_length=25, min_length=0)] = Field(
        None, alias="actNumber", description="Mõõtmisakti number"
    )
    act_date: Optional[datetime] = Field(
        None, alias="actDate", description="Mõõtmisakti kuupäev"
    )
    measurements: Optional[conlist(ShipmentItem)] = Field(
        None, description="Mõõtmistulemused EVR poolt sätestatud formaadis "
    )
    custom_measurement_data: Optional[Any] = Field(
        None,
        alias="customMeasurementData",
        description="Mõõtmistulemused vabas formaadis",
    )
    measurer_code: Optional[StrictStr] = Field(
        None, alias="measurerCode", description="Mõõtja registri kood"
    )
    creation_time: Optional[datetime] = Field(
        None, alias="creationTime", description="Lisamise aeg"
    )
    total: Optional[Total] = None
    __properties = [
        "actNumber",
        "actDate",
        "measurements",
        "customMeasurementData",
        "measurerCode",
        "creationTime",
        "total",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeasurementAct:
        """Create an instance of MeasurementAct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in measurements (list)
        _items = []
        if self.measurements:
            for _item in self.measurements:
                if _item:
                    _items.append(_item.to_dict())
            _dict["measurements"] = _items
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict["total"] = self.total.to_dict()
        # set to None if act_number (nullable) is None
        # and __fields_set__ contains the field
        if self.act_number is None and "act_number" in self.__fields_set__:
            _dict["actNumber"] = None

        # set to None if act_date (nullable) is None
        # and __fields_set__ contains the field
        if self.act_date is None and "act_date" in self.__fields_set__:
            _dict["actDate"] = None

        # set to None if measurements (nullable) is None
        # and __fields_set__ contains the field
        if self.measurements is None and "measurements" in self.__fields_set__:
            _dict["measurements"] = None

        # set to None if custom_measurement_data (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.custom_measurement_data is None
            and "custom_measurement_data" in self.__fields_set__
        ):
            _dict["customMeasurementData"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeasurementAct:
        """Create an instance of MeasurementAct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MeasurementAct.parse_obj(obj)

        _obj = MeasurementAct.parse_obj(
            {
                "act_number": obj.get("actNumber"),
                "act_date": obj.get("actDate"),
                "measurements": [
                    ShipmentItem.from_dict(_item) for _item in obj.get("measurements")
                ]
                if obj.get("measurements") is not None
                else None,
                "custom_measurement_data": obj.get("customMeasurementData"),
                "measurer_code": obj.get("measurerCode"),
                "creation_time": obj.get("creationTime"),
                "total": Total.from_dict(obj.get("total"))
                if obj.get("total") is not None
                else None,
            }
        )
        return _obj
