# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from pyevr.openapi_client.models.assortment import Assortment


class PagedResultOfAssortment(BaseModel):
    """
    PagedResultOfAssortment
    """

    page_number: Optional[StrictInt] = Field(
        None, alias="pageNumber", description="Lehekülje number"
    )
    page_size: Optional[StrictInt] = Field(
        None, alias="pageSize", description="Lehekülje suurus"
    )
    page_result: Optional[conlist(Assortment)] = Field(
        None, alias="pageResult", description="Lehekülje tulemused"
    )
    total_count: Optional[StrictInt] = Field(
        None, alias="totalCount", description="Päringu vastete arv kokku"
    )
    __properties = ["pageNumber", "pageSize", "pageResult", "totalCount"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PagedResultOfAssortment:
        """Create an instance of PagedResultOfAssortment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in page_result (list)
        _items = []
        if self.page_result:
            for _item in self.page_result:
                if _item:
                    _items.append(_item.to_dict())
            _dict["pageResult"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PagedResultOfAssortment:
        """Create an instance of PagedResultOfAssortment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PagedResultOfAssortment.parse_obj(obj)

        _obj = PagedResultOfAssortment.parse_obj(
            {
                "page_number": obj.get("pageNumber"),
                "page_size": obj.get("pageSize"),
                "page_result": [
                    Assortment.from_dict(_item) for _item in obj.get("pageResult")
                ]
                if obj.get("pageResult") is not None
                else None,
                "total_count": obj.get("totalCount"),
            }
        )
        return _obj
