# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from pyevr.openapi_client.models.address import Address
from pyevr.openapi_client.models.contact_person import ContactPerson
from pyevr.openapi_client.models.coordinates import Coordinates
from pyevr.openapi_client.models.waybill_authorization import WaybillAuthorization


class PlaceOfDelivery(BaseModel):
    """
    PlaceOfDelivery
    """

    name: Optional[StrictStr] = Field(None, description="Tarnekoha nimi")
    code: Optional[StrictStr] = Field(None, description="Tarnekoha kood")
    register_code: Optional[StrictStr] = Field(
        None, alias="registerCode", description="Registrikood"
    )
    address: Optional[Address] = None
    near_address: Optional[StrictStr] = Field(
        None, alias="nearAddress", description="Lähiaadress"
    )
    coordinates: Optional[Coordinates] = None
    open_times: Optional[conlist(StrictStr)] = Field(
        None, alias="openTimes", description="Millal avatud"
    )
    is_public: Optional[StrictBool] = Field(
        None, alias="isPublic", description="Kas on avalik"
    )
    is_active: Optional[StrictBool] = Field(
        None, alias="isActive", description="Kas on aktiivne"
    )
    preferred_certificates: Optional[conlist(StrictStr)] = Field(
        None, alias="preferredCertificates", description="Eelistatud sertifikaadid"
    )
    contact_person: Optional[ContactPerson] = Field(None, alias="contactPerson")
    waybill_authorizations: Optional[conlist(WaybillAuthorization)] = Field(
        None, alias="waybillAuthorizations", description="Volitused"
    )
    description: Optional[constr(strict=True, max_length=400)] = Field(
        None, description="Märkused"
    )
    user_custom_data: Optional[Any] = Field(
        None,
        alias="userCustomData",
        description="Api kasutaja poolt kohandatavad andmed",
    )
    __properties = [
        "name",
        "code",
        "registerCode",
        "address",
        "nearAddress",
        "coordinates",
        "openTimes",
        "isPublic",
        "isActive",
        "preferredCertificates",
        "contactPerson",
        "waybillAuthorizations",
        "description",
        "userCustomData",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlaceOfDelivery:
        """Create an instance of PlaceOfDelivery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict["address"] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict["coordinates"] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_person
        if self.contact_person:
            _dict["contactPerson"] = self.contact_person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in waybill_authorizations (list)
        _items = []
        if self.waybill_authorizations:
            for _item in self.waybill_authorizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict["waybillAuthorizations"] = _items
        # set to None if user_custom_data (nullable) is None
        # and __fields_set__ contains the field
        if self.user_custom_data is None and "user_custom_data" in self.__fields_set__:
            _dict["userCustomData"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlaceOfDelivery:
        """Create an instance of PlaceOfDelivery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlaceOfDelivery.parse_obj(obj)

        _obj = PlaceOfDelivery.parse_obj(
            {
                "name": obj.get("name"),
                "code": obj.get("code"),
                "register_code": obj.get("registerCode"),
                "address": Address.from_dict(obj.get("address"))
                if obj.get("address") is not None
                else None,
                "near_address": obj.get("nearAddress"),
                "coordinates": Coordinates.from_dict(obj.get("coordinates"))
                if obj.get("coordinates") is not None
                else None,
                "open_times": obj.get("openTimes"),
                "is_public": obj.get("isPublic"),
                "is_active": obj.get("isActive"),
                "preferred_certificates": obj.get("preferredCertificates"),
                "contact_person": ContactPerson.from_dict(obj.get("contactPerson"))
                if obj.get("contactPerson") is not None
                else None,
                "waybill_authorizations": [
                    WaybillAuthorization.from_dict(_item)
                    for _item in obj.get("waybillAuthorizations")
                ]
                if obj.get("waybillAuthorizations") is not None
                else None,
                "description": obj.get("description"),
                "user_custom_data": obj.get("userCustomData"),
            }
        )
        return _obj
