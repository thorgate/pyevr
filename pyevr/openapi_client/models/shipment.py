# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, conlist, constr
from pyevr.openapi_client.models.certificate_claim import CertificateClaim
from pyevr.openapi_client.models.holding_base import HoldingBase
from pyevr.openapi_client.models.shipment_item import ShipmentItem
from pyevr.openapi_client.models.source import Source


class Shipment(BaseModel):
    """
    Shipment
    """

    holding_base: HoldingBase = Field(..., alias="holdingBase")
    source: Source = Field(...)
    items: conlist(ShipmentItem, max_items=25) = Field(..., description="Saadetis")
    certificate_claims: Optional[conlist(CertificateClaim, max_items=25)] = Field(
        None, alias="certificateClaims", description="Tarneahela sertifikaadi väited"
    )
    user_custom_data: Optional[Any] = Field(
        None,
        alias="userCustomData",
        description="Api kasutaja poolt kohandatavad andmed",
    )
    supply_contract_number: Optional[constr(strict=True, max_length=50)] = Field(
        None, alias="supplyContractNumber", description="Tarnelepingu number"
    )
    __properties = [
        "holdingBase",
        "source",
        "items",
        "certificateClaims",
        "userCustomData",
        "supplyContractNumber",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Shipment:
        """Create an instance of Shipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of holding_base
        if self.holding_base:
            _dict["holdingBase"] = self.holding_base.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict["source"] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict["items"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in certificate_claims (list)
        _items = []
        if self.certificate_claims:
            for _item in self.certificate_claims:
                if _item:
                    _items.append(_item.to_dict())
            _dict["certificateClaims"] = _items
        # set to None if certificate_claims (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.certificate_claims is None
            and "certificate_claims" in self.__fields_set__
        ):
            _dict["certificateClaims"] = None

        # set to None if user_custom_data (nullable) is None
        # and __fields_set__ contains the field
        if self.user_custom_data is None and "user_custom_data" in self.__fields_set__:
            _dict["userCustomData"] = None

        # set to None if supply_contract_number (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.supply_contract_number is None
            and "supply_contract_number" in self.__fields_set__
        ):
            _dict["supplyContractNumber"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Shipment:
        """Create an instance of Shipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Shipment.parse_obj(obj)

        _obj = Shipment.parse_obj(
            {
                "holding_base": HoldingBase.from_dict(obj.get("holdingBase"))
                if obj.get("holdingBase") is not None
                else None,
                "source": Source.from_dict(obj.get("source"))
                if obj.get("source") is not None
                else None,
                "items": [ShipmentItem.from_dict(_item) for _item in obj.get("items")]
                if obj.get("items") is not None
                else None,
                "certificate_claims": [
                    CertificateClaim.from_dict(_item)
                    for _item in obj.get("certificateClaims")
                ]
                if obj.get("certificateClaims") is not None
                else None,
                "user_custom_data": obj.get("userCustomData"),
                "supply_contract_number": obj.get("supplyContractNumber"),
            }
        )
        return _obj
