# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei 천nnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, confloat, conint, constr
from pyevr.openapi_client.models.pack import Pack
from pyevr.openapi_client.models.shipment_assortment import ShipmentAssortment


class ShipmentItem(BaseModel):
    """
    ShipmentItem
    """

    amount: Union[
        confloat(le=1.0e9, ge=0.0, strict=True),
        conint(le=1000000000, ge=0, strict=True),
    ] = Field(..., description="Kogus")
    pack: Optional[Pack] = None
    unit_code: constr(strict=True, max_length=10, min_length=0) = Field(
        ...,
        alias="unitCode",
        description="[M천천t체hiku kood](#operation/MeasurementUnits_List)",
    )
    assortment: ShipmentAssortment = Field(...)
    __properties = ["amount", "pack", "unitCode", "assortment"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShipmentItem:
        """Create an instance of ShipmentItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pack
        if self.pack:
            _dict["pack"] = self.pack.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assortment
        if self.assortment:
            _dict["assortment"] = self.assortment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShipmentItem:
        """Create an instance of ShipmentItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ShipmentItem.parse_obj(obj)

        _obj = ShipmentItem.parse_obj(
            {
                "amount": obj.get("amount"),
                "pack": Pack.from_dict(obj.get("pack"))
                if obj.get("pack") is not None
                else None,
                "unit_code": obj.get("unitCode"),
                "assortment": ShipmentAssortment.from_dict(obj.get("assortment"))
                if obj.get("assortment") is not None
                else None,
            }
        )
        return _obj
