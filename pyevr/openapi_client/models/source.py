# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr
from pyevr.openapi_client.models.address import Address
from pyevr.openapi_client.models.contact_person import ContactPerson
from pyevr.openapi_client.models.coordinates import Coordinates


class Source(BaseModel):
    """
    Source
    """

    name: constr(strict=True, max_length=200, min_length=0) = Field(
        ..., description="Maaüksuse või laoplatsi nimi"
    )
    code: Optional[constr(strict=True, max_length=50)] = Field(
        None, description="Laokood"
    )
    compartment: Optional[constr(strict=True, max_length=100)] = Field(
        None, description="Kvartal"
    )
    appropriation: Optional[constr(strict=True, max_length=200)] = Field(
        None, description="Eraldis"
    )
    planning_area: Optional[constr(strict=True, max_length=100)] = Field(
        None, alias="planningArea", description="Planeerimispiirkond"
    )
    address: Address = Field(...)
    coordinates: Optional[Coordinates] = None
    contact_person: Optional[ContactPerson] = Field(None, alias="contactPerson")
    near_address: Optional[constr(strict=True, max_length=150)] = Field(
        None, alias="nearAddress", description="Lähiaadress"
    )
    source_document_url: Optional[constr(strict=True, max_length=2000)] = Field(
        None, alias="sourceDocumentUrl", description="Päritoludokumendi URL"
    )
    __properties = [
        "name",
        "code",
        "compartment",
        "appropriation",
        "planningArea",
        "address",
        "coordinates",
        "contactPerson",
        "nearAddress",
        "sourceDocumentUrl",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Source:
        """Create an instance of Source from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict["address"] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict["coordinates"] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_person
        if self.contact_person:
            _dict["contactPerson"] = self.contact_person.to_dict()
        # set to None if code (nullable) is None
        # and __fields_set__ contains the field
        if self.code is None and "code" in self.__fields_set__:
            _dict["code"] = None

        # set to None if compartment (nullable) is None
        # and __fields_set__ contains the field
        if self.compartment is None and "compartment" in self.__fields_set__:
            _dict["compartment"] = None

        # set to None if appropriation (nullable) is None
        # and __fields_set__ contains the field
        if self.appropriation is None and "appropriation" in self.__fields_set__:
            _dict["appropriation"] = None

        # set to None if planning_area (nullable) is None
        # and __fields_set__ contains the field
        if self.planning_area is None and "planning_area" in self.__fields_set__:
            _dict["planningArea"] = None

        # set to None if near_address (nullable) is None
        # and __fields_set__ contains the field
        if self.near_address is None and "near_address" in self.__fields_set__:
            _dict["nearAddress"] = None

        # set to None if source_document_url (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.source_document_url is None
            and "source_document_url" in self.__fields_set__
        ):
            _dict["sourceDocumentUrl"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Source:
        """Create an instance of Source from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Source.parse_obj(obj)

        _obj = Source.parse_obj(
            {
                "name": obj.get("name"),
                "code": obj.get("code"),
                "compartment": obj.get("compartment"),
                "appropriation": obj.get("appropriation"),
                "planning_area": obj.get("planningArea"),
                "address": Address.from_dict(obj.get("address"))
                if obj.get("address") is not None
                else None,
                "coordinates": Coordinates.from_dict(obj.get("coordinates"))
                if obj.get("coordinates") is not None
                else None,
                "contact_person": ContactPerson.from_dict(obj.get("contactPerson"))
                if obj.get("contactPerson") is not None
                else None,
                "near_address": obj.get("nearAddress"),
                "source_document_url": obj.get("sourceDocumentUrl"),
            }
        )
        return _obj
