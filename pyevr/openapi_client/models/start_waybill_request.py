# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conint, conlist, constr
from pyevr.openapi_client.models.owner import Owner
from pyevr.openapi_client.models.receiver import Receiver
from pyevr.openapi_client.models.shipment import Shipment
from pyevr.openapi_client.models.transport import Transport
from pyevr.openapi_client.models.viewer import Viewer
from pyevr.openapi_client.models.waybill_place_of_delivery import WaybillPlaceOfDelivery


class StartWaybillRequest(BaseModel):
    """
    StartWaybillRequest
    """

    owner: Owner = Field(...)
    transport: Transport = Field(...)
    receiver: Receiver = Field(...)
    place_of_delivery: WaybillPlaceOfDelivery = Field(..., alias="placeOfDelivery")
    comment: Optional[constr(strict=True, max_length=400)] = Field(
        None, description="Märkused/lisainfo"
    )
    departure_time: datetime = Field(
        ..., alias="departureTime", description="Väljasõidu aeg"
    )
    submission_time: datetime = Field(
        ..., alias="submissionTime", description="Veoselehe EVR-i saatmise aeg"
    )
    shipments: conlist(Shipment, max_items=25) = Field(
        ..., description="Lähetatud veose andmed"
    )
    pre_journey_mileage: Optional[conint(strict=True, le=100000, ge=0)] = Field(
        None, alias="preJourneyMileage", description="Ettesõidu kilometraaž"
    )
    user_custom_data: Optional[Any] = Field(
        None,
        alias="userCustomData",
        description="Api kasutaja poolt kohandatavad andmed",
    )
    mass: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, description="Autorongi mass tonnides"
    )
    transport_order: Optional[constr(strict=True, max_length=13)] = Field(
        None, alias="transportOrder", description="Veotellimuse number"
    )
    viewers: Optional[conlist(Viewer)] = Field(None, description="Veoselehe vaatlejad")
    __properties = [
        "owner",
        "transport",
        "receiver",
        "placeOfDelivery",
        "comment",
        "departureTime",
        "submissionTime",
        "shipments",
        "preJourneyMileage",
        "userCustomData",
        "mass",
        "transportOrder",
        "viewers",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StartWaybillRequest:
        """Create an instance of StartWaybillRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict["owner"] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transport
        if self.transport:
            _dict["transport"] = self.transport.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver
        if self.receiver:
            _dict["receiver"] = self.receiver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of place_of_delivery
        if self.place_of_delivery:
            _dict["placeOfDelivery"] = self.place_of_delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipments (list)
        _items = []
        if self.shipments:
            for _item in self.shipments:
                if _item:
                    _items.append(_item.to_dict())
            _dict["shipments"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in viewers (list)
        _items = []
        if self.viewers:
            for _item in self.viewers:
                if _item:
                    _items.append(_item.to_dict())
            _dict["viewers"] = _items
        # set to None if pre_journey_mileage (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.pre_journey_mileage is None
            and "pre_journey_mileage" in self.__fields_set__
        ):
            _dict["preJourneyMileage"] = None

        # set to None if user_custom_data (nullable) is None
        # and __fields_set__ contains the field
        if self.user_custom_data is None and "user_custom_data" in self.__fields_set__:
            _dict["userCustomData"] = None

        # set to None if mass (nullable) is None
        # and __fields_set__ contains the field
        if self.mass is None and "mass" in self.__fields_set__:
            _dict["mass"] = None

        # set to None if viewers (nullable) is None
        # and __fields_set__ contains the field
        if self.viewers is None and "viewers" in self.__fields_set__:
            _dict["viewers"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StartWaybillRequest:
        """Create an instance of StartWaybillRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StartWaybillRequest.parse_obj(obj)

        _obj = StartWaybillRequest.parse_obj(
            {
                "owner": Owner.from_dict(obj.get("owner"))
                if obj.get("owner") is not None
                else None,
                "transport": Transport.from_dict(obj.get("transport"))
                if obj.get("transport") is not None
                else None,
                "receiver": Receiver.from_dict(obj.get("receiver"))
                if obj.get("receiver") is not None
                else None,
                "place_of_delivery": WaybillPlaceOfDelivery.from_dict(
                    obj.get("placeOfDelivery")
                )
                if obj.get("placeOfDelivery") is not None
                else None,
                "comment": obj.get("comment"),
                "departure_time": obj.get("departureTime"),
                "submission_time": obj.get("submissionTime"),
                "shipments": [
                    Shipment.from_dict(_item) for _item in obj.get("shipments")
                ]
                if obj.get("shipments") is not None
                else None,
                "pre_journey_mileage": obj.get("preJourneyMileage"),
                "user_custom_data": obj.get("userCustomData"),
                "mass": obj.get("mass"),
                "transport_order": obj.get("transportOrder"),
                "viewers": [Viewer.from_dict(_item) for _item in obj.get("viewers")]
                if obj.get("viewers") is not None
                else None,
            }
        )
        return _obj
