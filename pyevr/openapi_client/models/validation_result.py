# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei Ãµnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, StrictStr, conlist


class ValidationResult(BaseModel):
    """
    ValidationResult
    """

    errors: Optional[Dict[str, conlist(StrictStr)]] = None
    __properties = ["errors"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidationResult:
        """Create an instance of ValidationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in errors (dict of array)
        _field_dict_of_array = {}
        if self.errors:
            for _key in self.errors:
                if self.errors[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.errors[_key]
                    ]
            _dict["errors"] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidationResult:
        """Create an instance of ValidationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidationResult.parse_obj(obj)

        _obj = ValidationResult.parse_obj({"errors": obj.get("errors")})
        return _obj
