# coding: utf-8

"""
    EVR API

    OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

    The version of the OpenAPI document: 1.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, List, Optional, Union
from pydantic import (
    BaseModel,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    conint,
    conlist,
    constr,
)
from pyevr.openapi_client.models.measurement_act import MeasurementAct
from pyevr.openapi_client.models.owner import Owner
from pyevr.openapi_client.models.receiver import Receiver
from pyevr.openapi_client.models.shipment import Shipment
from pyevr.openapi_client.models.transport import Transport
from pyevr.openapi_client.models.waybill_authorization import WaybillAuthorization
from pyevr.openapi_client.models.waybill_note import WaybillNote
from pyevr.openapi_client.models.waybill_place_of_delivery import WaybillPlaceOfDelivery
from pyevr.openapi_client.models.waybill_status import WaybillStatus


class Waybill(BaseModel):
    """
    Waybill
    """

    owner: Owner = Field(...)
    transport: Transport = Field(...)
    receiver: Receiver = Field(...)
    place_of_delivery: WaybillPlaceOfDelivery = Field(..., alias="placeOfDelivery")
    comment: Optional[constr(strict=True, max_length=400)] = Field(
        None, description="Märkused/lisainfo"
    )
    departure_time: datetime = Field(
        ..., alias="departureTime", description="Väljasõidu aeg"
    )
    submission_time: datetime = Field(
        ..., alias="submissionTime", description="Veoselehe EVR-i saatmise aeg"
    )
    shipments: conlist(Shipment, max_items=25) = Field(
        ..., description="Lähetatud veose andmed"
    )
    pre_journey_mileage: Optional[conint(strict=True, le=100000, ge=0)] = Field(
        None, alias="preJourneyMileage", description="Ettesõidu kilometraaž"
    )
    user_custom_data: Optional[Any] = Field(
        None,
        alias="userCustomData",
        description="Api kasutaja poolt kohandatavad andmed",
    )
    mass: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, description="Autorongi mass tonnides"
    )
    transport_order: Optional[constr(strict=True, max_length=13)] = Field(
        None, alias="transportOrder", description="Veotellimuse number"
    )
    number: Optional[StrictStr] = Field(None, description="Veoselehe number")
    status: Optional[WaybillStatus] = None
    creation_time: Optional[datetime] = Field(
        None, alias="creationTime", description="Loomise aeg"
    )
    cancellation_time: Optional[datetime] = Field(
        None,
        alias="cancellationTime",
        description="Tühistamise aeg (kui veoseleht on tühistatud)",
    )
    cancellation_reason: Optional[StrictStr] = Field(
        None,
        alias="cancellationReason",
        description="Tühistamise põhjus (kui veoseleht on tühistatud)",
    )
    total_journey_mileage: Optional[StrictInt] = Field(
        None,
        alias="totalJourneyMileage",
        description="Kilometraaž koormaga (kui veoselehel on vedu lõpetatud)",
    )
    unloading_comment: Optional[StrictStr] = Field(
        None,
        alias="unloadingComment",
        description="Mahalaadimise kommentaar (kui veoselehel on vedu lõpetatud)",
    )
    unloading_time: Optional[datetime] = Field(
        None,
        alias="unloadingTime",
        description="Mahalaadimise aeg (kui veoselehel on vedu lõpetatud)",
    )
    finishing_time: Optional[datetime] = Field(
        None,
        alias="finishingTime",
        description="Veoselehe lõpetamise aeg (kui veoseleht on lõpetatud)",
    )
    last_modification_time: Optional[datetime] = Field(
        None, alias="lastModificationTime", description="Veoselehe viimase muutmise aeg"
    )
    notes: Optional[conlist(WaybillNote)] = Field(
        None, description="Veoselehe märkused"
    )
    waybill_authorizations: Optional[conlist(WaybillAuthorization)] = Field(
        None, alias="waybillAuthorizations", description="Veoselehe volitused"
    )
    waybill_latest_measurements: Optional[MeasurementAct] = Field(
        None, alias="waybillLatestMeasurements"
    )
    __properties = [
        "owner",
        "transport",
        "receiver",
        "placeOfDelivery",
        "comment",
        "departureTime",
        "submissionTime",
        "shipments",
        "preJourneyMileage",
        "userCustomData",
        "mass",
        "transportOrder",
        "number",
        "status",
        "creationTime",
        "cancellationTime",
        "cancellationReason",
        "totalJourneyMileage",
        "unloadingComment",
        "unloadingTime",
        "finishingTime",
        "lastModificationTime",
        "notes",
        "waybillAuthorizations",
        "waybillLatestMeasurements",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Waybill:
        """Create an instance of Waybill from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict["owner"] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transport
        if self.transport:
            _dict["transport"] = self.transport.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver
        if self.receiver:
            _dict["receiver"] = self.receiver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of place_of_delivery
        if self.place_of_delivery:
            _dict["placeOfDelivery"] = self.place_of_delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipments (list)
        _items = []
        if self.shipments:
            for _item in self.shipments:
                if _item:
                    _items.append(_item.to_dict())
            _dict["shipments"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item in self.notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["notes"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in waybill_authorizations (list)
        _items = []
        if self.waybill_authorizations:
            for _item in self.waybill_authorizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict["waybillAuthorizations"] = _items
        # override the default output from pydantic by calling `to_dict()` of waybill_latest_measurements
        if self.waybill_latest_measurements:
            _dict[
                "waybillLatestMeasurements"
            ] = self.waybill_latest_measurements.to_dict()
        # set to None if pre_journey_mileage (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.pre_journey_mileage is None
            and "pre_journey_mileage" in self.__fields_set__
        ):
            _dict["preJourneyMileage"] = None

        # set to None if user_custom_data (nullable) is None
        # and __fields_set__ contains the field
        if self.user_custom_data is None and "user_custom_data" in self.__fields_set__:
            _dict["userCustomData"] = None

        # set to None if mass (nullable) is None
        # and __fields_set__ contains the field
        if self.mass is None and "mass" in self.__fields_set__:
            _dict["mass"] = None

        # set to None if cancellation_time (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.cancellation_time is None
            and "cancellation_time" in self.__fields_set__
        ):
            _dict["cancellationTime"] = None

        # set to None if cancellation_reason (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.cancellation_reason is None
            and "cancellation_reason" in self.__fields_set__
        ):
            _dict["cancellationReason"] = None

        # set to None if total_journey_mileage (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.total_journey_mileage is None
            and "total_journey_mileage" in self.__fields_set__
        ):
            _dict["totalJourneyMileage"] = None

        # set to None if unloading_comment (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.unloading_comment is None
            and "unloading_comment" in self.__fields_set__
        ):
            _dict["unloadingComment"] = None

        # set to None if unloading_time (nullable) is None
        # and __fields_set__ contains the field
        if self.unloading_time is None and "unloading_time" in self.__fields_set__:
            _dict["unloadingTime"] = None

        # set to None if finishing_time (nullable) is None
        # and __fields_set__ contains the field
        if self.finishing_time is None and "finishing_time" in self.__fields_set__:
            _dict["finishingTime"] = None

        # set to None if last_modification_time (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.last_modification_time is None
            and "last_modification_time" in self.__fields_set__
        ):
            _dict["lastModificationTime"] = None

        # set to None if notes (nullable) is None
        # and __fields_set__ contains the field
        if self.notes is None and "notes" in self.__fields_set__:
            _dict["notes"] = None

        # set to None if waybill_authorizations (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.waybill_authorizations is None
            and "waybill_authorizations" in self.__fields_set__
        ):
            _dict["waybillAuthorizations"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Waybill:
        """Create an instance of Waybill from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Waybill.parse_obj(obj)

        _obj = Waybill.parse_obj(
            {
                "owner": Owner.from_dict(obj.get("owner"))
                if obj.get("owner") is not None
                else None,
                "transport": Transport.from_dict(obj.get("transport"))
                if obj.get("transport") is not None
                else None,
                "receiver": Receiver.from_dict(obj.get("receiver"))
                if obj.get("receiver") is not None
                else None,
                "place_of_delivery": WaybillPlaceOfDelivery.from_dict(
                    obj.get("placeOfDelivery")
                )
                if obj.get("placeOfDelivery") is not None
                else None,
                "comment": obj.get("comment"),
                "departure_time": obj.get("departureTime"),
                "submission_time": obj.get("submissionTime"),
                "shipments": [
                    Shipment.from_dict(_item) for _item in obj.get("shipments")
                ]
                if obj.get("shipments") is not None
                else None,
                "pre_journey_mileage": obj.get("preJourneyMileage"),
                "user_custom_data": obj.get("userCustomData"),
                "mass": obj.get("mass"),
                "transport_order": obj.get("transportOrder"),
                "number": obj.get("number"),
                "status": obj.get("status"),
                "creation_time": obj.get("creationTime"),
                "cancellation_time": obj.get("cancellationTime"),
                "cancellation_reason": obj.get("cancellationReason"),
                "total_journey_mileage": obj.get("totalJourneyMileage"),
                "unloading_comment": obj.get("unloadingComment"),
                "unloading_time": obj.get("unloadingTime"),
                "finishing_time": obj.get("finishingTime"),
                "last_modification_time": obj.get("lastModificationTime"),
                "notes": [WaybillNote.from_dict(_item) for _item in obj.get("notes")]
                if obj.get("notes") is not None
                else None,
                "waybill_authorizations": [
                    WaybillAuthorization.from_dict(_item)
                    for _item in obj.get("waybillAuthorizations")
                ]
                if obj.get("waybillAuthorizations") is not None
                else None,
                "waybill_latest_measurements": MeasurementAct.from_dict(
                    obj.get("waybillLatestMeasurements")
                )
                if obj.get("waybillLatestMeasurements") is not None
                else None,
            }
        )
        return _obj
